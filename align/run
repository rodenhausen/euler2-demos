#!/usr/bin/env python

import os
import sys
import shutil
from subprocess import call
import yaml
import yaml.constructor
from collections import OrderedDict

class OrderedDictYAMLLoader(yaml.Loader):
    """
    A YAML loader that loads mappings into ordered dictionaries.
    """

    def __init__(self, *args, **kwargs):
        yaml.Loader.__init__(self, *args, **kwargs)

        self.add_constructor(u'tag:yaml.org,2002:map', type(self).construct_yaml_map)
        self.add_constructor(u'tag:yaml.org,2002:omap', type(self).construct_yaml_map)

    def construct_yaml_map(self, node):
        data = OrderedDict()
        yield data
        value = self.construct_mapping(node)
        data.update(value)

    def construct_mapping(self, node, deep=False):
        if isinstance(node, yaml.MappingNode):
            self.flatten_mapping(node)
        else:
            raise yaml.constructor.ConstructorError(None, None,
                'expected a mapping node, but found %s' % node.id, node.start_mark)

        mapping = OrderedDict()
        for key_node, value_node in node.value:
            key = self.construct_object(key_node, deep=deep)
            try:
                hash(key)
            except TypeError, exc:
                raise yaml.constructor.ConstructorError('while constructing a mapping',
                    node.start_mark, 'found unacceptable key (%s)' % exc, key_node.start_mark)
            value = self.construct_object(value_node, deep=deep)
            mapping[key] = value
        return mapping


def execute(key, value):
    with open(os.path.join(output, '%s.stdout' % key), 'w+') as out:
        with open(os.path.join(output, '%s.stderr' % key), 'w+') as err:
            call(value, stdout=out, stderr=err, shell=True)
            
def clean():
    for f in os.listdir('.'):
        if os.path.isfile(f):
            if (not f == 'commands') and (not f == 'run') and (not f.startswith('.') ):
                os.remove(f)
        if os.path.isdir(f) and (not f == 'input'):
            shutil.rmtree(f)
            
if __name__ == '__main__':
    output = 'output'
    if not os.path.exists(output):
        os.makedirs(output)
    with open('commands', 'r') as commands:
        doc = yaml.load(commands, OrderedDictYAMLLoader)
        if len(sys.argv) == 1 or (len(sys.argv) == 2 and sys.argv[1].lower() == 'all'):
            for k, v in doc.items():
                execute(k, v)
        elif len(sys.argv) == 2 and sys.argv[1].lower() == 'clean':
            clean()
        elif len(sys.argv) == 2:
            if ',' in sys.argv[1]:
                for command in sys.argv[1].split(','):
                    execute(command, doc[command])
            elif '-' in sys.argv[1]:
                commands = sys.argv[1].split('-')
                inside = False
                for k, v in doc.items():
                    if inside:
                        execute(k, v)
                    if k == commands[0]:
                        execute(k, v)
                        inside = True
                    if k == commands[-1]:
                        inside = False
            else:
                execute(sys.argv[1], doc[sys.argv[1]])
            
            
            
